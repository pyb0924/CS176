import React, {useEffect, useRef, useState} from 'react';
import {GetServerSideProps} from "next";
import styles from "../../styles/My.module.css";
import Head from "next/head";
import HeadBar from "../../components/HeadBar/HeadBar";
import MyAlbum from "../../components/MyAlbum/MyAlbum";
import BottomBar from "../../components/BottomBar/BottomBar";


export const getServerSideProps: GetServerSideProps = async (context) => {
    const id = context.params.id
    const res = await fetch(`http://localhost:3200/getSongListDetail?disstid=${id}`)
    let data = await res.json()
    data = data.response.cdlist[0]

    const songId=data.songlist[0].mid
    const res2 = await fetch('http://localhost:3200/getSongInfo?songmid=' + songId)
    let song = await res2.json()
    song=song.response.songinfo.data.track_info

    const res3 =await fetch('http://localhost:3200/getMusicPlay?songmid='+ songId)
    let resUrl=await res3.json()
    //console.log(resUrl.data.playUrl[songId].url)
    resUrl=resUrl.data.playUrl[songId].url
    
    

    return {
        props: {
            album_id: data.disstid,
            cover_url: data.logo,
            description: data.desc,
            album_title: data.dissname,
            album_owner: data.nick,
            album_owner_header: data.headurl,
            song_list: data.songlist,
            initSong:song,
            initSongUrl:resUrl
        }, // will be passed to the page component as props
    }
}




function Album(props) {
    const {initSongUrl,initSong,description, album_id, cover_url, album_title, album_owner, album_owner_header, song_list} = props

    const [playing, setPlaying] = useState(false);
    const [songIndex, setSongIndex] = useState(0);
    const [song, setSong] = useState(initSong);
    const [songUrl, setSongUrl] = useState(initSongUrl);
    const [volume, setVolume] = useState(0.5);
    const [progress, setProgress] = useState(0);


    useEffect(() => {
        const fetchSongInfo = async () => {
            const id=song_list[songIndex].mid
            const res = await fetch('http://localhost:3200/getSongInfo?songmid=' + id)
            let data = await res.json()
            setSong(data.response.songinfo.data.track_info)

            const resUrl =await fetch('http://localhost:3200/getMusicPlay?songmid='+id)
            let url=await resUrl.json()

            setSongUrl(url.data.playUrl[id].url)
        }
        fetchSongInfo()
    }, [songIndex]);


    const changePlaying = (event) => {
        if (playing) {
            audioMedia.current.pause()
        } else {
            audioMedia.current.volume=0.5
            audioMedia.current.play()
        }
        setPlaying(!playing)
    }


    const beginPlaying = (index) => {
        return (event) =>{
            setPlaying(true)
            setSongIndex(index)
            audioMedia.current.volume=0.5
            setProgress(0);
            audioMedia.current.play()
        }
    }

    const changeVolume=(event)=>{
        if(volume>0){
            event.target.src='/mute.svg'
            audioMedia.current.volume=0;
            setVolume(0);
        }else {
            event.target.src='/volume.svg'
            audioMedia.current.volume=0.5
            setVolume(0.5)
        }
    }

    const audioMedia = useRef(null);

    if(audioMedia.current){
        console.log(audioMedia.current)
        console.log(audioMedia.current.currentTime)
    }
    
    const handleTimeUpdate=() =>{
        console.log(audioMedia.current.currentTime)
        setProgress(audioMedia.current.currentTime)
    }

    console.log(initSongUrl)

    return (
        <div className={styles.container}>
            <Head>
                <title>{'歌单:' + album_title}</title>
                <meta name="description" content="Generated by create next app"/>
                <link rel="icon" href="/logo.ico"/>
            </Head>


            <HeadBar isDiscover={false}/>

            <div className={styles.main}>
                <MyAlbum description={description} coverUrl={cover_url} headerUrl={album_owner_header}
                         userName={album_owner} title={album_title} song_list={song_list} beginPlaying={beginPlaying}/>
            </div>

            <BottomBar playing={playing} progress={progress} changePlaying={changePlaying} changeVolume={changeVolume} song={song} coverUrl={cover_url} />
            <audio ref={audioMedia} src={songUrl} preload='auto' onTimeUpdate={handleTimeUpdate}/>
        </div>
    );
}

export default Album;